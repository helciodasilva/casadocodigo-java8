Você verá que a grande maioria dos métodos novos se encontra na família de interfaces do Stream. Dessa forma, as interfaces antigas não fcam cheias de métodos default. Além disso, há uma vantagem grande de se utilizar streams: evitar efeitos colaterais na coleção com que estamos trabalhando.
Por que na saída apareceu o Guilherme Silveira, sendo que ele não tem mais de 100 pontos? Ele não aplicou o fltro na lista de usuários! Isso porque o método filter, assim como os demais métodos da interface Stream, não alteram os elementos do stream original! É muito importante saber que o Stream não tem efeito colateral sobre a coleção que o originou.
Outro ponto relevante: como alguns Streams podem ser originados de recursos de IO, ele implementa a interface AutoCloseable e possui o close. Um exemplo é usar os novos métodos da classe java.nio.file.Files, incluída no Java 7 e com novidades no Java 8, para gerar um Stream. Nesse caso, é fundamental tratar as exceções e o finally, ou então usar o try with resources. Em outras situações, quando sabemos que estamos lidando com streams gerados por coleções, essa preocupação não é necessária